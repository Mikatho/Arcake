{"version":3,"sources":["components/snippets/Navbar/NavMenu.tsx","components/snippets/cookieBanner/CookieBanner.tsx","components/snippets/newsBanner/NewsBanner.tsx","components/utility/Layout.tsx","components/pages/Home.tsx","utility/config.ts","components/formInputs/toggle/Toggle.tsx","components/formInputs/textInput/TextInput.tsx","components/pages/createJoinGame/CreateGame.tsx","components/utility/DisplayWhen.tsx","components/pages/createJoinGame/JoinGame.tsx","components/pages/aboutUs/AboutUs.tsx","components/pages/howToPlay/Intimacy.tsx","components/pages/howToPlay/Dronq.tsx","utility/enums/GameStatus.ts","components/gameComponents/content/startRound/StartRound.tsx","components/gameComponents/content/results/Results.tsx","components/gameComponents/content/statements/Statements.tsx","components/gameComponents/content/Content.tsx","components/gameComponents/gameInput/buttonInput/ButtonInput.tsx","components/gameComponents/gameInput/textInput/TextInput.tsx","utility/enums/StatementType.ts","components/gameComponents/gameInput/personInput/PersonInput.tsx","utility/enums/Games.ts","components/gameComponents/gameInput/gameMasterInput/GameMasterInputs.tsx","components/gameComponents/gameInput/GameInput.tsx","components/sidebars/optionsSidebar/OptionsSidebar.tsx","components/snippets/inviteLink/InviteLink.tsx","components/icons/iconCheckmark/IconCheckmark.tsx","components/icons/iconQuestionmark/IconQuestionmark.tsx","components/icons/iconStop/IconStop.tsx","components/snippets/userList/Userlist.tsx","components/sidebars/playerSidebar/addPlayerForm/AddPlayerForm.tsx","utility/enums/WSQuery.ts","components/sidebars/playerSidebar/PlayersSidebar.tsx","components/sidebars/Sidebars.tsx","components/pages/game/Game.tsx","components/pages/submitIdeas/SubmitIdeas.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NavMenu","props","toggleNavbar","bind","state","collapsed","this","setState","Navbar","className","light","Container","NavbarBrand","tag","Link","to","NavbarToggler","onClick","Collapse","isOpen","navbar","NavItem","NavLink","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","window","open","Component","displayName","name","CookieBan","message","onAccept","cookie","NewsBanner","Layout","data-name","xmlns","viewBox","preserveAspectRatio","d","children","Home","SERVER_LINK","console","log","Toggle","toggleFunction","toggleBoolean","FormGroup","FormControlLabel","control","checked","onChange","label","TextInput","onChangeFunction","defaultValue","id","TextField","required","variant","CreateGame","useState","isDrinking","isSingle","playerProperties","setPlayerProperties","playerName","setPlayerName","playerHasName","setPlayerHasName","roomName","setRoomName","history","useHistory","useCookies","setCookie","toggleSingle","toggleDrinking","url","data","a","Axios","post","then","response","RoomData","player","path","push","alert","e","target","value","length","preventDefault","postData","DisplayWhen","visible","JoinGame","useParams","isInvited","setInvited","onChangeRoomName","useEffect","undefined","playerID","status","roomData","App","GameStatus","StartRound","Results","map","result","Statements","Statement","Content","ContentProps","gameStatus","results","statement","isStandartView","isPlayer","games","content","startRound","endRound","activeRound","ButtonInput","statementString","handleAnswerInput","StatementType","answer","setAnswer","type","placeholder","aria-label","aria-describedby","PersonInput","Games","players","GameMasterInputs","isGameMaster","Button","GameInput","showTextInput","showButtons","showPersons","buttonPersonContent","buttonAnswerContent","answers","gameMasterOnClick","nextProps","prevState","NoInput","NumberInput","OptionsSidebar","optionsProps","Dronq","Intimacy","game","toggleIsPlayer","toggleIsOnline","isOnline","changeGame","leaveGame","toggleStandardView","isStandardView","entry","htmlFor","color","InviteLink","inviteLink","input","document","createElement","body","appendChild","select","execCommand","removeChild","IconCheckmark","width","height","fill","fill-rule","IconQuestionmark","IconStop","Userlist","playerProps","userList","kickUser","makeGamemaster","makeDisplay","statusIcons","hasVoted","isIdle","statusIcon","divider","AddPlayerForm","WSQuery","setAddPlayerClicked","addPlayer","PlayersSidebar","playersProps","gameMaster","qrCodeClicked","setQrCodeClicked","addPlayerClicked","renderAs","size","Sidebars","setInviteLink","setUserList","optionsToggle","setOptionsToggle","playersToggle","setPlayersToggle","playerSideDisplay","setPlayerSideDisplay","total","finished","notVoted","idle","forEach","user","updatePlayerSideDisplay","socket","io","require","Game","RoomID","UserName","solution","__v","_id","cat_activity","cat_drink","cat_game","cat_sex","rating","setStatement","location","href","domainURL","substring","indexOf","Array","setGameMaster","gameMasterID","setGameMasterID","removeCookie","setGame","setGameStatus","setResults","setIsPlayer","setIsOnline","setStandardView","axios","deleteCookies","responseRoom","room","activeStatement","checkForGamemaster","useBeforeunload","event","emit","disconnect","fetchRoomData","query","on","sendUserData","startGame","next","receiveResults","addAnswer","startEvaluation","kick","bool","makeGameMaster","setOwnIsPlayer","SubmitIdeas","action","multiline","rows","process","CookiesProvider","exact","component","AboutUs","Boolean","hostname","match","rootElement","getElementById","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.7d4535ad.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport {Component} from 'react';\r\nimport {\r\n    Collapse,\r\n    Container, Dropdown, DropdownItem, DropdownMenu, DropdownToggle,\r\n    Navbar,\r\n    NavbarBrand,\r\n    NavbarToggler,\r\n    NavItem,\r\n    NavLink, UncontrolledDropdown,\r\n} from \"reactstrap\";\r\nimport {Link, Switch, Route} from 'react-router-dom';\r\nimport \"./navBar.css\";\r\nimport {DisplayWhen} from '../../utility/DisplayWhen';\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\ninterface INavMenuState {\r\n    collapsed: boolean;\r\n}\r\n\r\nexport class NavMenu extends Component<{}, INavMenuState> {\r\n    static displayName = NavMenu.name;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.toggleNavbar = this.toggleNavbar.bind(this);\r\n        this.state = {\r\n            collapsed: true,\r\n        };\r\n    }\r\n\r\n    public toggleNavbar(): void {\r\n        this.setState({\r\n            collapsed: !this.state.collapsed,\r\n        });\r\n    }\r\n\r\n    public render(): React.ReactElement {\r\n        return (\r\n            <header>\r\n                <Navbar\r\n                    className=\"navbar-expand-md navbar-toggleable-md ng-white border-bottom box-shadow\"\r\n                    light\r\n                >\r\n                    <Container className=\"navbar-container\">\r\n                        <NavbarBrand tag={Link} to=\"/\">\r\n                            Arcake\r\n                        </NavbarBrand>\r\n                        <NavbarToggler\r\n                            onClick={this.toggleNavbar}\r\n                            className=\"mr-2\"\r\n                        />\r\n                        <Collapse\r\n                            className=\"d-md-inline-flex flex-md-row-reverse\"\r\n                            isOpen={!this.state.collapsed}\r\n                            navbar\r\n                        >\r\n                            <ul className=\"navbar-nav flex-grow\">\r\n                                <NavItem>\r\n                                    <NavLink\r\n                                        tag={Link}\r\n                                        className=\"text-dark\"\r\n                                        to=\"/\"\r\n                                    >\r\n                                        Home\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink\r\n                                        tag={Link}\r\n                                        className=\"text-dark\"\r\n                                        to=\"/creategame\"\r\n                                    >\r\n                                        Create Game\r\n                                    </NavLink>\r\n                                </NavItem>\r\n\r\n                                <NavItem>\r\n                                    <NavLink\r\n                                        tag={Link}\r\n                                        className=\"text-dark\"\r\n                                        to=\"/joingame\"\r\n                                    >\r\n                                        Join Game\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                                <UncontrolledDropdown nav inNavbar>\r\n                                    <DropdownToggle nav caret>\r\n                                        How to Play\r\n                                    </DropdownToggle>\r\n                                    <DropdownMenu right>\r\n                                        <DropdownItem tag={Link} to=\"/howtoplay/dronq\">\r\n                                            Dronq\r\n                                        </DropdownItem>\r\n                                        <DropdownItem tag={Link} to=\"/howtoplay/intimacy\">\r\n                                            Intimacy\r\n                                        </DropdownItem>\r\n                                    </DropdownMenu>\r\n                                </UncontrolledDropdown>\r\n                                <NavItem>\r\n                                    <NavLink\r\n                                        tag={Link}\r\n                                        className=\"text-dark\"\r\n                                        to=\"/submitideas\"\r\n                                    >\r\n                                        Submit Ideas\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                                <UncontrolledDropdown nav inNavbar>\r\n                                    <DropdownToggle nav caret>\r\n                                        Info\r\n                                    </DropdownToggle>\r\n                                    <DropdownMenu right>\r\n                                        <DropdownItem tag={Link} to=\"/aboutus\">\r\n                                            About Us\r\n                                        </DropdownItem>\r\n                                        <DropdownItem tag={Link} to=\"/impressum\">\r\n                                            Impressum\r\n                                        </DropdownItem>\r\n                                    </DropdownMenu>\r\n                                </UncontrolledDropdown>\r\n                                <UncontrolledDropdown nav inNavbar>\r\n                                    <DropdownToggle nav caret>\r\n                                        Support Us\r\n                                    </DropdownToggle>\r\n                                    <DropdownMenu right>\r\n                                        <DropdownItem tag={Link} onClick={() => {\r\n                                            window.open('https://www.instagram.com/project.arcake/');\r\n                                        }}>\r\n                                            Instagram\r\n                                        </DropdownItem>\r\n                                        <DropdownItem tag={Link} onClick={() => {\r\n                                            window.open('https://www.paypal.com/paypalme/projectarcake/');\r\n                                        }}>\r\n                                            Donate\r\n                                        </DropdownItem>\r\n                                    </DropdownMenu>\r\n                                </UncontrolledDropdown>\r\n                            </ul>\r\n                        </Collapse>\r\n                    </Container>\r\n                </Navbar>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n","import CookieBanner from 'react-cookie-banner';\r\nimport './cookieBanner.css';\r\nimport React, {Component} from \"react\";\r\n\r\nexport class CookieBan extends Component<{}, any>{\r\n    public render() {\r\n        return(\r\n            <>\r\n                <CookieBanner\r\n                    message=\"We are using cookies.\"\r\n                    onAccept={() => {}}\r\n                    cookie=\"UserAcceptedCookies\" />\r\n            </>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport {Component} from 'react';\r\nimport \"./newsBanner.css\"\r\n\r\n\r\nexport class NewsBanner extends Component {\r\n\r\n    public render(): React.ReactElement {\r\n        return (\r\n            <div className={\"NewsBanner\"}>\r\n                <h5>-- STILL IN DEVELOPMENT --</h5>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {Component} from 'react';\r\nimport {NavMenu} from '../snippets/Navbar/NavMenu';\r\nimport {CookieBan} from '../snippets/cookieBanner/CookieBanner';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport \"../../css/shapes.css\"\r\nimport {NewsBanner} from \"../snippets/newsBanner/NewsBanner\";\r\n\r\nexport class Layout extends Component {\r\n    static displayName = Layout.name;\r\n\r\n    public render(): React.ReactElement {\r\n        return (\r\n            <>\r\n                <CookieBan/>\r\n\r\n                <div className=\"background\">\r\n                    <div className=\"custom-shape-divider-top topshape\">\r\n                        <svg data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1200 120\"\r\n                             preserveAspectRatio=\"none\">\r\n                            <path d=\"M1200 0L0 0 598.97 114.72 1200 0z\">.</path>\r\n                        </svg>\r\n                    </div>\r\n                    <div className=\"custom-shape-divider-top midshape\">\r\n                        <svg data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1200 120\"\r\n                             preserveAspectRatio=\"none\">\r\n                            <path d=\"M1200 0L0 0 598.97 114.72 1200 0z\">.</path>\r\n                        </svg>\r\n                    </div>\r\n                    <div className=\"custom-shape-divider-top bottomshape\">\r\n                        <svg data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1200 120\"\r\n                             preserveAspectRatio=\"none\">\r\n                            <path d=\"M1200 0L0 0 598.97 114.72 1200 0z\">.</path>\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n                <div className=\"bodyContainer\">\r\n                    <div className=\"navbarContainer\">\r\n                        <NavMenu/>\r\n                    </div>\r\n                    <NewsBanner/>\r\n                    <div className=\"contentContainer\">{this.props.children}\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport \"../../css/index.css\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nfunction Home() {\r\n    return (\r\n        <>\r\n            <div className=\"HomepageBtns\">\r\n                <Link to=\"/creategame\">\r\n                    <button className=\"buttonStyleBasic\">Create Game</button>\r\n                </Link>\r\n            </div>\r\n            <div className=\"HomepageBtns\">\r\n                <Link to=\"/joingame\">\r\n                    <button className=\"buttonStyleBasic\">Join Game</button>\r\n                </Link>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","let SERVER_LINK: string;\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n    SERVER_LINK = 'http://localhost:3001'\r\n    console.log('i am in development')\r\n} else {\r\n    SERVER_LINK = ''\r\n    console.log('i am in production')\r\n}\r\n\r\nexport { SERVER_LINK }","import React from 'react';\r\nimport {FormControlLabel, FormGroup, Switch as MatSwitch} from \"@material-ui/core\";\r\n\r\ntype ToggleProps = {\r\n    toggleFunction: () => void,\r\n    toggleBoolean: boolean,\r\n}\r\n\r\nconst Toggle = function ({toggleFunction, toggleBoolean}:ToggleProps) {\r\n\r\n    return (\r\n        <FormGroup>\r\n            <FormControlLabel\r\n                control={<MatSwitch checked={toggleBoolean}\r\n                                    onChange={toggleFunction}/>}\r\n                label=\"\"\r\n            />\r\n        </FormGroup>\r\n    )\r\n}\r\n\r\nexport default Toggle;","import React from 'react';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport \"./textInput.css\";\r\n\r\ntype SwitcherProps = {\r\n    onChangeFunction: (input:any) => void,\r\n    label:string,\r\n    id:string,\r\n    defaultValue:string,\r\n}\r\n\r\nconst TextInput = function ({onChangeFunction, defaultValue, id, label}:SwitcherProps) {\r\n\r\n    return (\r\n        <TextField\r\n            className={\"createJoinInput\"}\r\n            required\r\n            id={id}\r\n            label={label}\r\n            defaultValue={defaultValue}\r\n            variant=\"outlined\"\r\n            onChange={onChangeFunction}\r\n        />\r\n    )\r\n}\r\n\r\nexport default TextInput;","import React, {useState} from 'react';\r\nimport \"../../../css/index.css\";\r\nimport './createjoinRoom.css';\r\nimport {Link, useHistory, Switch, Route} from \"react-router-dom\";\r\nimport Axios from 'axios'\r\nimport {useCookies} from 'react-cookie';\r\nimport {SERVER_LINK} from '../../../utility/config'\r\nimport Toggle from \"../../formInputs/toggle/Toggle\";\r\nimport TextInput from \"../../formInputs/textInput/TextInput\";\r\nimport IPlayerProperties from \"../../../utility/interface/IPlayerProperties\";\r\nimport IRoomData from \"../../../utility/interface/IRoomData\";\r\n\r\nfunction CreateGame() {\r\n    const [playerProperties, setPlayerProperties] = useState<IPlayerProperties>({isDrinking: true, isSingle: true});\r\n    const [playerName, setPlayerName] = useState(\"\");\r\n    const [playerHasName, setPlayerHasName] = useState(false);\r\n    const [roomName, setRoomName] = useState(\"\");\r\n    const history = useHistory();\r\n    const [cookie, setCookie, removeCookie] = useCookies(['playerID']);\r\n\r\n    function toggleSingle() {\r\n        setPlayerProperties({\r\n            isSingle: !playerProperties.isSingle,\r\n            isDrinking: playerProperties.isDrinking\r\n        })\r\n    }\r\n\r\n    function toggleDrinking() {\r\n        setPlayerProperties({\r\n            isSingle: playerProperties.isSingle,\r\n            isDrinking: !playerProperties.isDrinking\r\n        })\r\n    }\r\n\r\n    function onUserNameChange(e: any) {\r\n        setPlayerName(e.target.value)\r\n        setPlayerHasName(e.target.value.length > 0)\r\n    }\r\n\r\n    function onRoomNameChange(e: any) {\r\n        setRoomName(e.target.value);\r\n    }\r\n\r\n    async function postData(url: string, data: any) {\r\n        console.log(data)\r\n        Axios.post(url, data)\r\n            .then(response => {\r\n                if (response.data.message === 'success') {\r\n                    console.log('received data at create:', response.data)\r\n                    let RoomData : IRoomData = response.data.data;\r\n                    setCookie('playerID', RoomData.player.id, {path: '/'});\r\n                    setCookie('roomName', RoomData.roomName, {path: '/'});\r\n\r\n                    history.push(`/game/${RoomData.player.id}/${RoomData.roomName}`);\r\n                } else {\r\n                    //TODO FRONTEND COOLE MESSAGE UNTER BUTTON ODER SO\r\n                    console.log('Roomname already exists');\r\n                    alert(\"Roomname already exists, please choose a different name.\");\r\n                }\r\n            })\r\n    }\r\n\r\n    function createGame(e: any) {\r\n        if (playerHasName) {\r\n            e.preventDefault()\r\n            let data = {\r\n                playerName: playerName,\r\n                roomName: roomName,\r\n                playerProperties\r\n            }\r\n            postData(`${SERVER_LINK}/api/createRoom`, data)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"createjoinContainer\">\r\n            <div className=\"title\">\r\n                Create Game\r\n            </div>\r\n\r\n            <form className={\"formContainer\"}>\r\n                <TextInput onChangeFunction={onUserNameChange}\r\n                           label={\"Name\"}\r\n                           id={\"nameID\"}\r\n                           defaultValue={\"\"}\r\n                />\r\n                <TextInput onChangeFunction={onRoomNameChange}\r\n                           label={\"Game Name\"}\r\n                           id={\"roomNAME\"}\r\n                           defaultValue={\"\"}\r\n                />\r\n                Are you single?\r\n                <div className={\"flexRow\"} onClick={toggleSingle}>\r\n                    No\r\n                    <Toggle toggleBoolean={playerProperties.isSingle} toggleFunction={toggleSingle}/>\r\n                    Yes\r\n                </div>\r\n                Do you drink alcohol?\r\n\r\n                <div className={\"flexRow\"} onClick={toggleDrinking}>\r\n                    No\r\n                    <Toggle toggleBoolean={playerProperties.isDrinking} toggleFunction={toggleDrinking}/>\r\n                    Yes\r\n                </div>\r\n\r\n                <br/>\r\n\r\n                <button className=\"buttonStyleBasic CreateBtn\"\r\n                    //type=\"submit\"\r\n                        id=\"createRoom\"\r\n                        onClick={createGame}>\r\n                    Create Game\r\n                </button>\r\n\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreateGame;\r\n","import * as React from 'react';\r\nimport { Component } from 'react';\r\nimport { Container } from 'reactstrap';\r\n\r\ninterface IProps {\r\n    visible: boolean;\r\n}\r\n\r\nexport class DisplayWhen extends Component<IProps, {}> {\r\n    public render(): React.ReactElement {\r\n        if (this.props.visible) {\r\n            return (\r\n                <>\r\n                    {this.props.children}\r\n                </>\r\n            );\r\n        } else return <></>;\r\n    }\r\n}\r\n","import React, {useEffect, useState} from 'react';\r\nimport \"../../../css/index.css\";\r\nimport './createjoinRoom.css';\r\nimport {Link, useHistory} from \"react-router-dom\";\r\nimport Axios from 'axios'\r\nimport {DisplayWhen} from \"../../utility/DisplayWhen\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {useCookies} from 'react-cookie';\r\nimport {SERVER_LINK} from '../../../utility/config'\r\nimport TextInput from \"../../formInputs/textInput/TextInput\";\r\nimport Toggle from \"../../formInputs/toggle/Toggle\";\r\nimport IPlayerProperties from \"../../../utility/interface/IPlayerProperties\";\r\nimport IRoomData from \"../../../utility/interface/IRoomData\";\r\n\r\n\r\nfunction JoinGame() {\r\n    const [playerProperties, setPlayerProperties] = useState<IPlayerProperties>({isSingle: true, isDrinking: true})\r\n    const [playerName, setPlayerName] = useState('');\r\n    const [roomName, setRoomName] = useState(useParams().roomName);\r\n    const history = useHistory();\r\n    const [isInvited, setInvited] = useState(false);\r\n    const [playerHasName, setPlayerHasName] = useState(false);\r\n    const [cookie, setCookie, removeCookie] = useCookies(['playerID']);\r\n\r\n    useEffect(() => {\r\n        toggleInvited();\r\n        if (cookie.playerID && cookie.roomName) {\r\n            if(!isInvited){\r\n                setRoomName(cookie.roomName)\r\n                //history.push(`/game/${cookie.playerID}/${cookie.roomName}`);\r\n            }\r\n        }\r\n    })\r\n\r\n    function toggleSingle() {\r\n        setPlayerProperties({\r\n            isDrinking: playerProperties.isDrinking,\r\n            isSingle: !playerProperties.isSingle\r\n        })\r\n    }\r\n\r\n    function toggleDrinking() {\r\n        setPlayerProperties({\r\n            isDrinking: !playerProperties.isDrinking,\r\n            isSingle: playerProperties.isSingle\r\n        })}\r\n\r\n    function onChangePlayerName(e: any) {\r\n        setPlayerName(e.target.value)\r\n        setPlayerHasName(e.target.value.length > 0)\r\n    }\r\n\r\n    function onChangeRoomName(e: any) {\r\n        setRoomName(e.target.value)\r\n    }\r\n\r\n    function connectToRoom(e: any) {\r\n        if (playerHasName) {\r\n            e.preventDefault()\r\n            let url = `${SERVER_LINK}/invite/`\r\n            let data = {\r\n                playerName,\r\n                roomName,\r\n                playerProperties\r\n            }\r\n            Axios.post(url, data).then(response => {\r\n                if (response.data.status === 'failure') {\r\n                    console.log(response)\r\n                    alert(response.data.message);\r\n                    //TODO FRONTEND KRAM MACHEN WENN ES RAUM NICHT GIBT\r\n                    //FAIL MESSAGE IN response.data.message\r\n                } else {\r\n                    //SET COOKIE mit player id and room name\r\n                    console.log(response)\r\n                    let roomData : IRoomData = response.data.data;\r\n                    setCookie('playerID', roomData.player.id, {path: '/'});\r\n                    setCookie('roomName', roomData.roomName, {path: '/'});\r\n                    history.push(`/game/${roomData.player.id}/${roomData.roomName}`);\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    function toggleInvited() {\r\n        if (isInvited != undefined) {\r\n            setInvited(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"createjoinContainer\">\r\n            <div className=\"title\">\r\n                Join Game\r\n            </div>\r\n\r\n            <form className={\"formContainer\"}>\r\n                <TextInput onChangeFunction={onChangePlayerName} label={\"Name\"} id={\"nameID\"} defaultValue={\"\"}/>\r\n                <DisplayWhen visible={!isInvited}>\r\n                    <TextInput onChangeFunction={onChangeRoomName} label={\"Game Name\"} id={\"roomID\"} defaultValue={\"\"}/>\r\n                </DisplayWhen>\r\n                <DisplayWhen visible={isInvited}>\r\n                    <TextInput onChangeFunction={onChangeRoomName} label={\"Game Name\"} id={\"roomID\"}\r\n                               defaultValue={roomName}/>\r\n                </DisplayWhen>\r\n\r\n                Are you single?\r\n                <div className={\"flexRow\"} onClick={toggleSingle}>\r\n                    No\r\n                    <Toggle toggleBoolean={playerProperties.isSingle} toggleFunction={toggleSingle}/>\r\n                    Yes\r\n                </div>\r\n\r\n                Do you drink alcohol?\r\n                <div className={\"flexRow\"} onClick={toggleDrinking}>\r\n                    No\r\n                    <Toggle toggleBoolean={playerProperties.isDrinking} toggleFunction={toggleDrinking}/>\r\n                    Yes\r\n                </div>\r\n\r\n                <br/>\r\n\r\n                <button className=\"buttonStyleBasic CreateBtn\"\r\n                        id=\"joinRoom\"\r\n                        onClick={connectToRoom}>\r\n                    Join Game\r\n                </button>\r\n\r\n            </form>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default JoinGame;\r\n","import React from 'react';\r\nimport \"../../../css/index.css\";\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"allowScroll\">\r\n            <h4>\r\n                <p>\r\n                    <h2>Was ist Arcake?</h2>\r\n                    Auf Arcake kannst Du mit deinen Freunden Trink- und Partyspiele spielen!\r\n                    Alles was Du dazu brauchst sind ein oder mehrere Handys mit Browser und Internet.\r\n                    Keine App, kein Download, alles online!\r\n                </p>\r\n                <p>\r\n                    <h2>Was macht uns aus?</h2>\r\n                    Unser Ziel ist es, auf einer Seite entspannte Partyspiele und unbarmherzige Trinkspiele\r\n                    miteinander zu vereinen. Es geht ums Feiern und ums Trinken,\r\n                    aber auch darum in gemütlicher Runde Spaß zu haben oder seine Freunde näher kennenzulernen.\r\n                    Und alles kann eingestellt werden! Wenn du keinen Alkohol trinkst aber trotzdem mitspielen willst,\r\n                    ist das kein Problem! Wähle einfach aus, dass du nichts trinken willst.\r\n                    Du bist in einer Beziehung und willst nur christliche Fragen / Aufgaben bekommen?\r\n                    Schau einfach mal in die Einstellungen und gestalte das Spiel so wie du willst!\r\n                </p>\r\n                <p>\r\n                    <h2>Woher der Name Arcake?</h2>\r\n                    Arcake ist angelehnt an Arcade, wie die ganz klassischen, simplen aber stets unterhaltsamen\r\n                    Online-Spiele.\r\n                    Casual-Spiele für zwischendurch die für niemanden zu kompliziert sind.\r\n                    Ganz zufällig stecken da auch die Namen der Founder dieser Seite drin:\r\n                    <br></br>\r\n                    <b>Ar</b>ne Solty - Tom <b>Ca</b>lvin Haak - <b>Ke</b>nzo Rohde.\r\n                </p>\r\n                <p>\r\n                    <h2>Das Team:</h2>\r\n                    Tom-Calvin Haak - Arne Solty - Kelvin Leclaire - Tjark Mikath - Christian Paulsen - Patrick Paustian\r\n                    - Kenzo Rohde\r\n                </p>\r\n                <p className=\"lastAboutUsItem\">\r\n                    Falls ihr weitere Fragen habt, schreibt uns auf Paypal unter:\r\n                    project.arcake@gmail.com\r\n                </p>\r\n            </h4>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport \"../../../css/index.css\";\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"allowScroll\">\r\n            <h4>\r\n                <p>\r\n                    <h2>Was ist Intimacy?</h2>\r\n                    Bei Intimacy geht es um das Kennenlernen deiner Freunde.\r\n                    Es geht darum, deren dunkle Geheimnisse, heimliche Vorstellungen,\r\n                    unausgesprochene Vorlieben und Geschehnisse ans Licht zu bringen.<br/>\r\n                    Rundenweise wird eine Frage gestellt, jeder antwortet anonym mit ja oder nein,\r\n                    und schätzt dann offen wie viele mit ja gestimmt haben.\r\n                </p>\r\n                <p>\r\n                    <h2>Wie spielt man Intimacy?</h2>\r\n                    Der erste Spieler bekommt 4 Fragen vorgelegt. Die Fragen sind im Stil von “ich hab noch nie...”,\r\n                    “ich würde gerne mal...” oder so ähnlich. Der Spieler darf sich eine aussuchen, indem er sie\r\n                    anklickt.\r\n                    Diese Frage geht dann an alle.<br/>\r\n                    Jeder Spieler antwortet auf seinem Gerät anonym mit JA oder NEIN.\r\n                    Danach gibt jeder eine Schätzung ab, wie viele in der Runde mit JA geantwortet haben.\r\n                    Sobald alle abgestimmt haben, wird erst die Anzahl der tatsächlichen JA’s, dann die Spieler der\r\n                    Entfernung nach geordnet, angezeigt.<br/>\r\n                    Ab hier kann man sich überlegen wer wohl ja und wer nein gestimmt hat,\r\n                    dass Spiel geht aber weiter und der nächste Spieler kann sich eine Frage aussuchen oder eine eigene\r\n                    schreiben.\r\n                </p>\r\n            </h4>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport \"../../../css/index.css\";\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"allowScroll\">\r\n            <h4>\r\n                <p>\r\n                    <h2>Was ist Dronq?</h2>\r\n                    Dronq ist ein Klassisches Trinkspiel. Es werden zufällige Aufgaben,\r\n                    Abstimmungen oder Schätzfragen angezeigt. Für dieses Spiel ist es besonders wichtig,\r\n                    Deine Spielerdaten richtig einzugeben, denn manchen Aufgaben wirst Du oder ein Mitspieler\r\n                    direkt Angesprochen! Gefallen dir bestimmte Fragetypen nicht oder Du willst es heute ruhiger,\r\n                    doller oder erotischer angehen lassen, kannst Du das in den Einstellungen anpassen!\r\n                </p>\r\n                <p>\r\n                    <h2>Wie spielt man Dronq?</h2>\r\n                    Jede Runde wird eine neue Frage, eine neue Aufgabe oder eine neue Abstimmung angezeigt.\r\n                    Derjenige von euch, der den Raum erstellt hat, ist Gamemaster.\r\n                    Er kann als einziger “NEXT” drücken, um die nächste Frage aufzurufen, oder “END ROUND”,\r\n                    um eine Abstimmung frühzeitig zu beenden, falls nicht alle dabei sind.\r\n                    Aktuell gibt es neben einfachen Aufgaben 4 verschiedene Kategorien von Fragen:<br/>\r\n                    Ja/Nein:<br/>\r\n                    Alle bekommen eine Frage gestellt und müssen mit Ja oder Nein antworten.\r\n                    Die Spieler die in der Unterzahl sind haben verloren und werden in der Auflösung genannt!<br/>\r\n                    Multiple Choice:<br/>\r\n                    Alle bekommen eine Frage und 4 Antwortmöglichkeiten, im Stil alt bekannter Fernseh Quizshows.\r\n                    Die Spieler, die falsch geantwortet haben, haben verloren und werden in der Auflösung genannt!<br/>\r\n                    Wähle einen Spieler aus:<br/>\r\n                    Alle werden gefragt, welcher Spieler am ehesten etwas tun würde,\r\n                    jetzt etwas tun sollte oder einfach auf wen etwas am besten zutrifft.\r\n                    Jeder kann über Knöpfe für einen Spieler abstimmen. Der meistgewählte Spieler wird in der Auflösung\r\n                    genannt!<br/>\r\n                    Schätzfrage:<br/>\r\n                    Alle bekommen eine Schätzfrage gestellt. Ein Textfeld erscheint,\r\n                    in dem jeder seine Schätzung abgeben kann. Sobald alle ihr Schätzung gesendet haben,\r\n                    wird es ausgewertet und der Reihe nach angezeigt, wer am nächsten dran bis am weitesten weg\r\n                    ist.<br/>\r\n\r\n                    Weitere Kategorien sind in Arbeit, falls ihr vorschläge habt schreibt uns gerne im Menü unter\r\n                    “Submit Ideas” oder per Mail an project.arcake@gmail.com!\r\n\r\n                </p>\r\n            </h4>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default App;\r\n","enum GameStatus {\r\n    startRound,\r\n    activeRound,\r\n    endRound,\r\n}\r\nexport default GameStatus;","import React, {useEffect, useState} from 'react';\r\n\r\nconst StartRound = function () {\r\n\r\n    return (\r\n        <>\r\n            Willkommen zu Dronq <br/>\r\n            Lade deine Freunde ein, um gemeinsam zu spielen. <br/>\r\n            Drücke auf \"Start Round\" um die Runde zu starten. <br/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default StartRound;","import React, {useEffect, useState} from 'react';\r\n\r\ntype resultProps = {\r\n    Results: Array<string>\r\n}\r\n\r\nconst Results = function ({Results}: resultProps) {\r\n    return (\r\n        <>\r\n            {Results.map(result => {\r\n                return <p>{result}</p>\r\n            })}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Results;","import React, {useEffect, useState} from 'react';\r\n\r\ntype StatementProps = {\r\n    Statement: string\r\n}\r\n\r\nconst Statements = function ({Statement}: StatementProps) {\r\n\r\n    return (\r\n        <>\r\n            {Statement}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Statements;","import React, {useEffect, useState} from 'react';\r\nimport {DisplayWhen} from \"../../utility/DisplayWhen\";\r\nimport StartRound from \"./startRound/StartRound\";\r\nimport Results from \"./results/Results\";\r\nimport Statements from \"./statements/Statements\";\r\nimport \"./content.css\";\r\nimport IContent from \"../../../utility/interface/IContent\";\r\nimport GameStatus from \"../../../utility/enums/GameStatus\";\r\n\r\n\r\nconst Content = function (ContentProps: IContent) {\r\n    const {gameStatus, results, statement, isPlayer, isStandartView, games} = ContentProps\r\n\r\n    function content() {\r\n        return (\r\n            <>\r\n                <DisplayWhen visible={gameStatus == GameStatus.startRound}>\r\n                    <StartRound/>\r\n                </DisplayWhen>\r\n\r\n                <DisplayWhen visible={gameStatus == GameStatus.endRound}>\r\n                    <Results Results={results}/>\r\n                </DisplayWhen>\r\n\r\n                <DisplayWhen visible={gameStatus == GameStatus.activeRound}>\r\n                    <Statements Statement={statement}/>\r\n                </DisplayWhen>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (<>\r\n            <DisplayWhen visible={isStandartView}>\r\n                <div className=\"inGameHead\">{games}</div>\r\n                <div className=\"StatementContainer\">\r\n                    {content()}\r\n                </div>\r\n            </DisplayWhen>\r\n\r\n            <DisplayWhen visible={!isStandartView}>\r\n                <div className={\"rotate180\"}>\r\n                    <div className=\"inGameHead\">{games}</div>\r\n                    <div className=\"StatementContainer\">\r\n                        {content()}\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <div className=\"inGameHead\">{games}</div>\r\n                    <div className=\"StatementContainer\">\r\n                        {content()}\r\n                    </div>\r\n                </div>\r\n            </DisplayWhen>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Content;","import React from \"react\";\r\nimport \"../../../../css/index.css\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nlet socket: any;\r\n\r\n\r\ntype ButtonProps= {\r\n    statementString: string[];\r\n    handleAnswerInput: (eee: string) => void;\r\n}\r\n\r\nfunction ButtonInput({statementString, handleAnswerInput}:ButtonProps) {\r\n\r\n    const renderUserButtons = () => {\r\n        if(statementString)\r\n        return statementString.map((statement ) => (\r\n            <Button variant=\"contained\" onClick={() => {handleAnswerInput(statement)}}>{statement}</Button>\r\n        ))\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"buttonContainer\">\r\n            {    //renderUserButtons()\r\n                statementString.map(statement => {\r\n                    if (statement !== '') {\r\n                        return <button className=\"buttonStyleBasic\" onClick={() => {\r\n                            handleAnswerInput(statement)\r\n                        }}>{statement}</button>\r\n                    }\r\n                })\r\n            }\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default ButtonInput;","import React, {useState} from \"react\";\r\nimport \"../../../../css/index.css\";\r\nimport \"../../../pages/game/game.css\";\r\n\r\nlet socket: any;\r\n\r\ntype TextProps= {\r\n    statementString: string[];\r\n    handleAnswerInput: (eee: string) => void;\r\n\r\n}\r\n\r\nfunction TextInput({statementString, handleAnswerInput}:TextProps) {\r\n    const [answer, setAnswer] = useState('')\r\n\r\n    function onInputChange(e: any) {\r\n        setAnswer(e.target.value);\r\n    }\r\n\r\n    function submitAnswer() {\r\n        handleAnswerInput(answer);\r\n    }\r\n\r\n    return (\r\n        <div className=\"inputContainer inputStyle\">\r\n            <div className=\"input-group\">\r\n                <input onChange={onInputChange} type=\"number\" className=\"form-control\" placeholder=\"\" aria-label=\"Example text with button addon\"\r\n                       aria-describedby=\"button-addon1\"/>\r\n                <div className=\"input-group-prepend numberInputBtn\">\r\n                    <button onClick={submitAnswer} className=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon1\">Send</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default TextInput;","enum StatementType {\r\n    NoInput=\"0\",\r\n    ButtonInput=\"1\",\r\n    PersonInput=\"2\",\r\n    NumberInput=\"3\"\r\n}\r\nexport default StatementType;","import React, {useState} from \"react\";\r\nimport \"../../../../css/index.css\";\r\nimport IClient from \"../../../../utility/interface/IClient\";\r\nimport {Dropdown, DropdownItem, DropdownMenu, DropdownToggle, UncontrolledDropdown} from \"reactstrap\";\r\n\r\n\r\n\r\ntype PersonProps = {\r\n    players: IClient[];\r\n    handleAnswerInput: (eee: string) => void;\r\n}\r\n\r\nfunction PersonInput({players, handleAnswerInput}: PersonProps) {\r\n    return (\r\n        <UncontrolledDropdown>\r\n            <DropdownToggle>\r\n                Choose a player\r\n            </DropdownToggle>\r\n            <DropdownMenu>\r\n                {players.map(player => {\r\n                    return <DropdownItem onClick={() => handleAnswerInput(player.name)}>{player.name}</DropdownItem>\r\n                })}\r\n            </DropdownMenu>\r\n        </UncontrolledDropdown>\r\n    );\r\n}\r\n\r\n\r\nexport default PersonInput;","enum Games {\r\n    Dronq=\"Dronq\",\r\n    Intimacy=\"Intimacy\",\r\n}\r\nexport default Games;","import React, {useEffect, useState} from 'react';\r\nimport {DisplayWhen} from \"../../../utility/DisplayWhen\";\r\nimport GameStatus from \"../../../../utility/enums/GameStatus\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\ntype gameMasterInputProps = {\r\n    isGameMaster: boolean,\r\n    gameStatus: GameStatus,\r\n    onClick:() => void;\r\n}\r\n\r\nconst GameMasterInputs = function ({isGameMaster, gameStatus, onClick}: gameMasterInputProps) {\r\n\r\n    return (\r\n        <DisplayWhen visible={isGameMaster}>\r\n            <DisplayWhen visible={gameStatus == GameStatus.startRound}>\r\n                <Button className=\"buttonStyleBasic CreateBtn GameBtn\" onClick={onClick}\r\n                        variant=\"contained\">Start Round</Button>\r\n            </DisplayWhen>\r\n            <DisplayWhen visible={gameStatus == GameStatus.endRound}>\r\n                <Button className=\"buttonStyleBasic CreateBtn GameBtn\" onClick={onClick}\r\n                        variant=\"contained\">Next</Button>\r\n            </DisplayWhen>\r\n            <DisplayWhen visible={gameStatus == GameStatus.activeRound}>\r\n                <Button className=\"buttonStyleBasic CreateBtn GameBtn\" onClick={onClick}\r\n                        variant=\"contained\">End Round</Button>\r\n            </DisplayWhen>\r\n        </DisplayWhen>\r\n    )\r\n}\r\n\r\nexport default GameMasterInputs;","import React, {Component} from 'react';\r\nimport \"../../pages/game/game.css\";\r\nimport {DisplayWhen} from \"../../utility/DisplayWhen\";\r\nimport ButtonInput from \"./buttonInput/ButtonInput\";\r\nimport TextInput from \"./textInput/TextInput\";\r\nimport StatementType from \"../../../utility/enums/StatementType\";\r\nimport PersonInput from \"./personInput/PersonInput\";\r\nimport IClient from \"../../../utility/interface/IClient\";\r\nimport IGameInput from \"../../../utility/interface/IGameInput\";\r\nimport GameStatus from \"../../../utility/enums/GameStatus\";\r\nimport GameMasterInputs from \"./gameMasterInput/GameMasterInputs\";\r\n\r\n\r\ntype IInputState = {\r\n    showTextInput: boolean;\r\n    showButtons: boolean;\r\n    showPersons: boolean;\r\n    buttonPersonContent: IClient[];\r\n    buttonAnswerContent: string[];\r\n}\r\n\r\ninterface IInputProps {\r\n    statement: IGameInput;\r\n    players: IClient[];\r\n    handleAnswerInput: (answer: string) => void;\r\n    gameStatus: GameStatus;\r\n    isPlayer: boolean;\r\n    isGameMaster: boolean,\r\n    gameMasterOnClick: () => void;\r\n}\r\n\r\nexport default class GameInput extends Component<IInputProps, IInputState> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            showTextInput: false,\r\n            showButtons: false,\r\n            showPersons: false,\r\n            buttonPersonContent: [],\r\n            buttonAnswerContent: [\"\"]\r\n        }\r\n\r\n    }\r\n\r\n\r\n    static getDerivedStateFromProps(nextProps: IInputProps, prevState: IInputState) {\r\n        // do things with nextProps.someProp and prevState.cachedSomeProp\r\n        switch (nextProps.statement.type) {\r\n            case StatementType.NoInput:\r\n                return {\r\n                    showPersons: false,\r\n                    showTextInput: false,\r\n                    buttonPersonContent: [],\r\n                    showButtons: false,\r\n                    buttonAnswerContent: []\r\n                };\r\n            case StatementType.ButtonInput:\r\n                return {\r\n                    showPersons: false,\r\n                    showTextInput: false,\r\n                    buttonPersonContent: [],\r\n                    showButtons: true,\r\n                    buttonAnswerContent: nextProps.statement.answers\r\n                };\r\n            case StatementType.NumberInput:\r\n                return {\r\n                    showPersons: false,\r\n                    showTextInput: true,\r\n                    buttonPersonContent: [],\r\n                    showButtons: false,\r\n                    buttonAnswerContent: []\r\n                };\r\n            case StatementType.PersonInput:\r\n                return {\r\n                    showPersons: true,\r\n                    showTextInput: false,\r\n                    buttonPersonContent: nextProps.players,\r\n                    showButtons: false,\r\n                    buttonAnswerContent: []\r\n                };\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n\r\n            <div className=\"gameInputContainer\">\r\n                <DisplayWhen visible={this.props.gameStatus == GameStatus.activeRound && this.props.isPlayer}>\r\n                    <div className=\"inputContainer\">\r\n                        <DisplayWhen visible={this.state.showTextInput}>\r\n                            <TextInput handleAnswerInput={this.props.handleAnswerInput}\r\n                                       statementString={this.props.statement.answers}/>\r\n                        </DisplayWhen>\r\n                        <DisplayWhen visible={this.state.showButtons}>\r\n                            <ButtonInput handleAnswerInput={this.props.handleAnswerInput}\r\n                                         statementString={this.state.buttonAnswerContent}/>\r\n                        </DisplayWhen>\r\n                        <DisplayWhen visible={this.state.showPersons}>\r\n                            <PersonInput handleAnswerInput={this.props.handleAnswerInput}\r\n                                         players={this.state.buttonPersonContent}/>\r\n                        </DisplayWhen>\r\n                    </div>\r\n                </DisplayWhen>\r\n\r\n                <GameMasterInputs gameStatus={this.props.gameStatus} isGameMaster={this.props.isGameMaster} onClick={this.props.gameMasterOnClick}/>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {Component, useState} from \"react\";\r\nimport \"./optionsSidebar.css\"\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport Toggle from \"../../formInputs/toggle/Toggle\";\r\nimport IOptionsSidebar from \"../../../utility/interface/IOptionsSidebar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Games from \"../../../utility/enums/Games\";\r\nimport {DisplayWhen} from \"../../utility/DisplayWhen\";\r\nimport {Dropdown, DropdownItem, DropdownMenu, DropdownToggle, UncontrolledDropdown} from \"reactstrap\";\r\n\r\n\r\ntype OptionsSidebarProps = {\r\n    optionsProps: IOptionsSidebar\r\n}\r\n\r\nexport const OptionsSidebar = ({optionsProps}: OptionsSidebarProps) => {\r\n    let games = [Games.Dronq, Games.Intimacy] //TODO: GET FROM ENUMS\r\n\r\n    const {isGameMaster, game, toggleIsPlayer, toggleIsOnline, isPlayer, isOnline, changeGame, leaveGame, toggleStandardView, isStandardView} = optionsProps;\r\n\r\n    return (\r\n        <div className=\"invSidebar ui sidebar overlay left inverted menu visible\">\r\n            <div className={\"sidebarContainer\"}>\r\n                <div className={\"optionsContainer\"}>\r\n\r\n                    <div className={\"optionEntry\"}>\r\n                        <h4>Current Game:</h4>\r\n\r\n                        <UncontrolledDropdown>\r\n                            <DropdownToggle>{game}</DropdownToggle>\r\n                            <DropdownMenu>\r\n                                {games.map(entry => {\r\n                                    return <DropdownItem\r\n                                        onClick={() => changeGame(entry)}>{entry}</DropdownItem>\r\n                                })}\r\n                            </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                    </div>\r\n\r\n\r\n                    <div className={\"optionEntry\"} onClick={toggleIsPlayer}>\r\n                        <h4>Device Type:</h4>\r\n                        <div className={\"flexRow\"}>\r\n                            Display\r\n                            <Toggle toggleFunction={toggleIsPlayer} toggleBoolean={isPlayer}/>\r\n                            Player\r\n                        </div>\r\n                    </div>\r\n\r\n                    <DisplayWhen visible={false && isGameMaster && isPlayer}>\r\n                        <div className={\"optionEntry\"} onClick={toggleIsOnline}>\r\n                            <h4>Gamemode:</h4>\r\n                            <div className={\"flexRow\"}>\r\n                                Offline\r\n                                <Toggle toggleFunction={toggleIsOnline}\r\n                                        toggleBoolean={isOnline}/>\r\n                                Online\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className={\"optionEntry\"}>\r\n\r\n                            <DisplayWhen visible={false}>\r\n\r\n                                {/*TODO: add onclickEvents and add it to game.tsx, set checked boolean to true*/}\r\n                                <h4>Categorys:</h4>\r\n                                <div className={\"CategoryContainer\"}>\r\n                                    <label htmlFor={\"checkboxStandart\"}>standart</label>\r\n                                    <input type=\"checkBox\" id={\"checkboxStandart\"}/>\r\n                                    <label htmlFor={\"checkboxSexual\"}>sexual</label>\r\n                                    <input type=\"checkBox\" id={\"checkboxSexual\"}/>\r\n                                    <label htmlFor={\"checkboxAlcoholic\"}>alcoholic</label>\r\n                                    <input type=\"checkBox\" id={\"checkboxAlcoholic\"}/>\r\n                                </div>\r\n                            </DisplayWhen>\r\n\r\n                        </div>\r\n                    </DisplayWhen>\r\n\r\n                    <DisplayWhen visible={!isPlayer}>\r\n                        <div className={\"optionEntry\"} onClick={toggleStandardView}>\r\n                            <h4>View:</h4>\r\n                            <div className={\"flexRow\"}>\r\n                                Mirrored\r\n                                <Toggle toggleFunction={toggleStandardView}\r\n                                        toggleBoolean={isStandardView}/>\r\n                                Standart\r\n                            </div>\r\n                        </div>\r\n                    </DisplayWhen>\r\n\r\n                </div>\r\n                <Button variant=\"contained\" color=\"primary\" type=\"submit\"\r\n                        className={\"leaveGame\"} onClick={leaveGame}>\r\n                    Leave Room\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default OptionsSidebar;","import React from 'react';\r\nimport \"./inviteButton.css\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n\r\ntype InviteProps = {\r\n    inviteLink: string\r\n};\r\n\r\nexport const InviteLink = ({inviteLink}: InviteProps) => {\r\n\r\n    function CopyInviteLink(): void {\r\n\r\n        const input = document.createElement(\"textarea\");\r\n        document.body.appendChild(input);\r\n        input.value = inviteLink;\r\n        input.select();\r\n        document.execCommand(\"copy\");\r\n        document.body.removeChild(input);\r\n    }\r\n\r\n    return (\r\n        <Button\r\n            variant=\"contained\" color=\"primary\"\r\n                type=\"submit\"\r\n                id=\"createRoom\" className=\"inviteButton\"\r\n                onClick={CopyInviteLink}>\r\n            Copy Invite Link\r\n        </Button>\r\n    );\r\n}\r\n\r\nexport default InviteLink;\r\n","import React from \"react\";\r\n\r\nexport const IconCheckmark = () => {\r\n\r\n    return (\r\n        <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\"\r\n             className=\"bi bi-check-circle-fill\" fill=\"currentColor\"\r\n             xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path fill-rule=\"evenodd\"\r\n                  d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z\"/>\r\n        </svg>\r\n    );\r\n}\r\nexport default IconCheckmark;","import React from \"react\";\r\n\r\nexport const IconQuestionmark = () => {\r\n\r\n    return (\r\n        <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\"\r\n             className=\"bi bi-question-circle-fill\" fill=\"currentColor\"\r\n             xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path fill-rule=\"evenodd\"\r\n                  d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM6.57 6.033H5.25C5.22 4.147 6.68 3.5 8.006 3.5c1.397 0 2.673.73 2.673 2.24 0 1.08-.635 1.594-1.244 2.057-.737.559-1.01.768-1.01 1.486v.355H7.117l-.007-.463c-.038-.927.495-1.498 1.168-1.987.59-.444.965-.736.965-1.371 0-.825-.628-1.168-1.314-1.168-.901 0-1.358.603-1.358 1.384zm1.251 6.443c-.584 0-1.009-.394-1.009-.927 0-.552.425-.94 1.01-.94.609 0 1.028.388 1.028.94 0 .533-.42.927-1.029.927z\"/>\r\n        </svg>\r\n    );\r\n}\r\nexport default IconQuestionmark;","import React from \"react\";\r\n\r\nexport const IconStop = () => {\r\n\r\n    return (\r\n        <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\"\r\n             className=\"bi bi-slash-circle-fill\"\r\n             fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path fill-rule=\"evenodd\"\r\n                  d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-4.146-3.146a.5.5 0 0 0-.708-.708l-7 7a.5.5 0 0 0 .708.708l7-7z\"/>\r\n        </svg>\r\n    );\r\n}\r\nexport default IconStop;","import React from \"react\";\r\nimport \"./userList.css\";\r\nimport IconCheckmark from \"../../icons/iconCheckmark/IconCheckmark\";\r\nimport IconQuestionmark from \"../../icons/iconQuestionmark/IconQuestionmark\";\r\nimport IconStop from \"../../icons/iconStop/IconStop\";\r\nimport IClient from \"../../../utility/interface/IClient\";\r\nimport {DisplayWhen} from \"../../utility/DisplayWhen\";\r\nimport {Dropdown, DropdownItem, DropdownMenu, DropdownToggle, UncontrolledDropdown} from \"reactstrap\";\r\nimport IPlayerSidebar from \"../../../utility/interface/IPlayerSidebar\";\r\n\r\n\r\ntype GameUserProps = {\r\n    playerProps: IPlayerSidebar\r\n}\r\n\r\nfunction Userlist({playerProps}: GameUserProps) {\r\n    const {isGameMaster, userList, kickUser, makeDisplay, makeGamemaster} = playerProps;\r\n\r\n    return (\r\n        <>\r\n            <div className={isGameMaster ? \"GameMasterUserList\" : \"userList\"}>\r\n\r\n                {/*COLUMN TITLES*/}\r\n                <div>Name</div>\r\n                <div>Status</div>\r\n                <DisplayWhen visible={isGameMaster}>Action</DisplayWhen>\r\n\r\n                {userList.map(player => {\r\n                    let statusIcons = [];\r\n                    if (player.status.hasVoted) {\r\n                        statusIcons.push(<IconCheckmark/>);\r\n                    } else {\r\n                        statusIcons.push(<IconQuestionmark/>);\r\n                    }\r\n\r\n                    if (player.status.isIdle) {\r\n                        statusIcons.push(<IconStop/>);\r\n                    }\r\n\r\n                    return (\r\n                        <>\r\n                            <div>{player.name}</div>\r\n                            <div>\r\n                                {statusIcons.map((statusIcon) => {\r\n                                    return (<>{statusIcon}</>)\r\n                                })}\r\n                            </div>\r\n                            <DisplayWhen visible={isGameMaster}>\r\n                                <div>\r\n                                    <UncontrolledDropdown>\r\n                                        <DropdownToggle>: : :</DropdownToggle>\r\n                                        <DropdownMenu right>\r\n                                            <DropdownItem onClick={() => makeGamemaster(player)}>Give\r\n                                                Gamemaster</DropdownItem>\r\n                                            <DropdownItem divider/>\r\n                                            <DropdownItem onClick={() => kickUser(player)}>Kick\r\n                                                Player</DropdownItem>\r\n                                   {/*         <DropdownItem divider/>\r\n                                            <DropdownItem onClick={() => makeDisplay(player)}>Make\r\n                                                Display</DropdownItem>*/}\r\n                                        </DropdownMenu>\r\n                                    </UncontrolledDropdown>\r\n                                </div>\r\n                            </DisplayWhen>\r\n                        </>\r\n                    )\r\n                })}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Userlist;","import React, {useEffect, useState} from \"react\"\r\nimport \"./addPlayerForm.css\"\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextInput from \"../../../formInputs/textInput/TextInput\";\r\nimport Toggle from \"../../../formInputs/toggle/Toggle\";\r\nimport IPlayerProperties from \"../../../../utility/interface/IPlayerProperties\";\r\n\r\ntype addPlayerFormProps = {\r\n    setAddPlayerClicked: (bool: boolean) => void;\r\n    addPlayer: (playerName: string, playerProperties: IPlayerProperties) => void;\r\n}\r\n\r\nfunction AddPlayerForm({setAddPlayerClicked, addPlayer}: addPlayerFormProps) {\r\n    const [playerProperties, setPlayerProperties] = useState<IPlayerProperties>({isSingle: true, isDrinking: true})\r\n    const [playerName, setPlayerName] = useState('');\r\n    const [playerHasName, setPlayerHasName] = useState(false);\r\n\r\n    function toggleSingle() {\r\n        setPlayerProperties({\r\n            isSingle: !playerProperties.isSingle,\r\n            isDrinking: playerProperties.isDrinking\r\n        })\r\n    }\r\n\r\n    function toggleDrinking() {\r\n        setPlayerProperties({\r\n            isSingle: playerProperties.isSingle,\r\n            isDrinking: !playerProperties.isDrinking\r\n        })\r\n    }\r\n\r\n    function onChangePlayerName(e: any) {\r\n        setPlayerName(e.target.value)\r\n        setPlayerHasName(e.target.value.length > 0)\r\n    }\r\n\r\n    function addPlayerClick(e: any) {\r\n        if (playerHasName) {\r\n            e.preventDefault()\r\n            setAddPlayerClicked(false);\r\n            addPlayer(playerName, playerProperties)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form className={\"formContainer\"}>\r\n            <TextInput onChangeFunction={onChangePlayerName} label={\"Name\"} id={\"nameID\"} defaultValue={\"\"}/>\r\n\r\n            Are you single?\r\n            <div className={\"flexRow\"} onClick={toggleSingle}>\r\n                No\r\n                <Toggle toggleBoolean={playerProperties.isSingle} toggleFunction={toggleSingle}/>\r\n                Yes\r\n            </div>\r\n\r\n            Do you drink alcohol?\r\n            <div className={\"flexRow\"} onClick={toggleDrinking}>\r\n                No\r\n                <Toggle toggleBoolean={playerProperties.isDrinking} toggleFunction={toggleDrinking}/>\r\n                Yes\r\n            </div>\r\n\r\n            <br/>\r\n\r\n            <div className={\"flex\"}>\r\n                <Button variant=\"contained\" color=\"primary\" type=\"submit\"\r\n                        className={\"addPlayer\"} onClick={addPlayerClick}>\r\n                    ADD PLAYER\r\n                </Button>\r\n                <div className={\"spacing\"}/>\r\n                <Button variant=\"contained\" color=\"primary\"\r\n                        className={\"cancel\"} onClick={() => setAddPlayerClicked(false)}>\r\n                    CANCEL\r\n                </Button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddPlayerForm;","enum WSQuery{\r\n    sendUserData,\r\n    disconnect,\r\n\r\n    startGame,\r\n    next,\r\n    addAnswer,\r\n    receiveResults,\r\n    startEvaluation,\r\n\r\n    kick,\r\n    makeGameMaster,\r\n    setIsPlayer,\r\n    setOwnIsPlayer,\r\n    makeDisplay,\r\n\r\n}\r\n\r\nexport default WSQuery;","import React, {Component, useState} from \"react\";\r\nimport QRcode from \"qrcode.react\";\r\nimport {DisplayWhen} from \"../../utility/DisplayWhen\"\r\nimport InviteLink from \"../../snippets/inviteLink/InviteLink\";\r\nimport './playersSidebar.css';\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport IconCheckmark from \"../../icons/iconCheckmark/IconCheckmark\";\r\nimport IconQuestionmark from \"../../icons/iconQuestionmark/IconQuestionmark\";\r\nimport IconStop from \"../../icons/iconStop/IconStop\";\r\nimport IPlayerSidebar from \"../../../utility/interface/IPlayerSidebar\";\r\nimport Userlist from \"../../snippets/userList/Userlist\";\r\nimport {Simulate} from \"react-dom/test-utils\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AddPlayerForm from \"./addPlayerForm/AddPlayerForm\";\r\n\r\ntype playersProps = {\r\n    playersProps:IPlayerSidebar\r\n}\r\n\r\nexport const PlayersSidebar = ({playersProps}: playersProps) => {\r\n    const {userList, kickUser, gameMaster, inviteLink, roomName, isGameMaster, addPlayer} = playersProps;\r\n    const [qrCodeClicked, setQrCodeClicked] = useState(false);\r\n    const [addPlayerClicked, setAddPlayerClicked] = useState(false);\r\n\r\n\r\n    return (\r\n        <div className=\"invSidebar ui sidebar overlay right inverted menu visible\"\r\n             onClick={() => {\r\n                 if (qrCodeClicked) {\r\n                     setQrCodeClicked(false);\r\n                 }\r\n             }\r\n             }>\r\n            <div className={\"sidebarContainer\"}>\r\n\r\n                <DisplayWhen visible={!qrCodeClicked && !addPlayerClicked}>\r\n                    <div className=\"inviteContainer\">\r\n                        <div className={\"flexColumn\"}>\r\n                            <div className=\"roomName\">\r\n                                Room Name : {roomName}\r\n                            </div>\r\n                            <div className=\"InviteLink\">\r\n                                <InviteLink inviteLink={inviteLink}/>\r\n                            </div>\r\n                        </div>\r\n                        <div className={\"qrcodeBackground\"} onClick={() => setQrCodeClicked(!qrCodeClicked)}>\r\n                            <QRcode className=\"qrcode\" onClick={() => setQrCodeClicked(!qrCodeClicked)}\r\n                                    value={inviteLink} renderAs={\"svg\"} size={75}/>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className={\"playerContainer\"}>\r\n                        <h3>Players:</h3>\r\n                        <Userlist playerProps={playersProps}/>\r\n                    </div>\r\n\r\n                    <Button variant=\"contained\" color=\"primary\" type=\"submit\"\r\n                            className={\"addPlayer\"} onClick={() => setAddPlayerClicked(true)}>\r\n                        ADD PLAYER\r\n                    </Button>\r\n                    <h6>{<IconCheckmark/>} : has voted | {<IconQuestionmark/>} : vote open | {<IconStop/>} : idle</h6>\r\n                </DisplayWhen>\r\n\r\n\r\n                <DisplayWhen visible={qrCodeClicked && !addPlayerClicked}>\r\n                    <div className=\"roomName\">\r\n                        <h2>Room Name : {roomName}</h2>\r\n                    </div><br/>\r\n                    <div className={\"qrcodeBackground\"} onClick={() => setQrCodeClicked(!qrCodeClicked)}>\r\n                        <QRcode className=\"qrcode\" onClick={() => setQrCodeClicked(!qrCodeClicked)}\r\n                                value={inviteLink} renderAs={\"svg\"} size={250}/>\r\n                    </div>\r\n                    <h4>arcake.app/joingame/{roomName}</h4>\r\n                    <div className=\"InviteLink\">\r\n                        <InviteLink inviteLink={inviteLink}/>\r\n                    </div>\r\n                </DisplayWhen>\r\n\r\n                <DisplayWhen visible={addPlayerClicked}>\r\n                    <AddPlayerForm setAddPlayerClicked={setAddPlayerClicked} addPlayer={addPlayer}/>\r\n                </DisplayWhen>\r\n\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlayersSidebar;","import React, {Component, useEffect, useState} from \"react\";\r\nimport {DisplayWhen} from \"../utility/DisplayWhen\";\r\nimport './sidebars.css';\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport OptionsSidebar from \"./optionsSidebar/OptionsSidebar\";\r\nimport PlayersSidebar from \"./playerSidebar/PlayersSidebar\";\r\nimport IPlayerSidebar from \"../../utility/interface/IPlayerSidebar\";\r\nimport IOptionsSidebar from \"../../utility/interface/IOptionsSidebar\";\r\n\r\ntype InviteBarProps = {\r\n    playersProps: IPlayerSidebar\r\n    optionsProps: IOptionsSidebar\r\n}\r\n\r\nexport const Sidebars = ({playersProps, optionsProps}: InviteBarProps) => {\r\n    const [inviteLink, setInviteLink] = useState(playersProps.inviteLink);\r\n    const [roomName, setRoomName] = useState(playersProps.roomName);\r\n    const [userList, setUserList] = useState(playersProps.userList)\r\n    const [optionsToggle, setOptionsToggle] = useState(false);\r\n    const [playersToggle, setPlayersToggle] = useState(false);\r\n    const [playerSideDisplay, setPlayerSideDisplay] = useState(\"\");\r\n\r\n\r\n    //init\r\n    useEffect(() => {\r\n        setInviteLink(playersProps.inviteLink);\r\n        setRoomName(playersProps.roomName);\r\n        setUserList(playersProps.userList);\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setUserList(playersProps.userList);\r\n    }, [playersProps.userList])\r\n\r\n    useEffect(() => {\r\n        updatePlayerSideDisplay()\r\n    }, [userList])\r\n\r\n    function updatePlayerSideDisplay() {\r\n        let total = 0, finished = 0, notVoted = 0, idle = 0;\r\n        userList.forEach((user) => {\r\n            if (user.status.hasVoted) {\r\n                finished++;\r\n            } else if (user.status.isIdle) {\r\n                idle++;\r\n            } else {\r\n                notVoted++;\r\n            }\r\n            total++;\r\n        })\r\n        setPlayerSideDisplay(`(${total}) Players : 🟢${finished} 🟠${notVoted} 🔴${idle}`)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={\"rotateLeft\"}>\r\n                <div className=\"sidebarLeft\">\r\n                    <button onClick={() => setOptionsToggle(!optionsToggle)} className=\"sidebarButton\">\r\n                        <span className=\"sidebarText\">Options</span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={\"rotateRight\"}>\r\n                <div className=\"sidebarRight\">\r\n                    <button onClick={() => setPlayersToggle(!playersToggle)} className=\"sidebarButton\">\r\n                        <span className=\"sidebarText\">{playerSideDisplay}</span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            <DisplayWhen visible={optionsToggle}>\r\n                <OptionsSidebar optionsProps={optionsProps}/>\r\n                <div className=\"closeSidebar\" onClick={() => setOptionsToggle(!optionsToggle)}/>\r\n            </DisplayWhen>\r\n\r\n            <DisplayWhen visible={playersToggle}>\r\n                <PlayersSidebar playersProps={playersProps}\r\n                                />\r\n                <div className=\"closeSidebar\" onClick={() => setPlayersToggle(!playersToggle)}/>\r\n            </DisplayWhen>\r\n\r\n        </>\r\n    );\r\n\r\n}\r\nexport default Sidebars;","import React, {useEffect, useState} from 'react';\r\nimport \"../../../css/index.css\";\r\nimport {useHistory, useParams} from \"react-router-dom\";\r\nimport {DisplayWhen} from \"../../utility/DisplayWhen\";\r\nimport axios from 'axios'\r\nimport {useCookies} from 'react-cookie';\r\nimport {useBeforeunload} from 'react-beforeunload';\r\nimport {SERVER_LINK} from '../../../utility/config'\r\nimport Content from \"../../gameComponents/content/Content\";\r\nimport IGameInput from \"../../../utility/interface/IGameInput\";\r\nimport IClient from \"../../../utility/interface/IClient\";\r\nimport GameInput from \"../../gameComponents/gameInput/GameInput\";\r\nimport GameMasterInputs from \"../../gameComponents/gameInput/gameMasterInput/GameMasterInputs\";\r\nimport Sidebars from \"../../sidebars/Sidebars\";\r\nimport IPlayerProperties from \"../../../utility/interface/IPlayerProperties\";\r\nimport {Player} from \"../../../../../util/Player\";\r\nimport IRoom from \"../../../utility/interface/IRoom\";\r\nimport StatementType from \"../../../utility/enums/StatementType\";\r\nimport GameStatus from \"../../../utility/enums/GameStatus\";\r\nimport Games from \"../../../utility/enums/Games\";\r\nimport WSQuery from \"../../../utility/enums/WSQuery\";\r\n\r\n\r\nconst io = require('socket.io-client');\r\n\r\nlet socket: any;\r\n\r\ntype GameProps = {\r\n    RoomID: string,\r\n    UserName: string,\r\n};\r\n\r\n//TODO disable inputs if round is not active\r\n//TODO disable inputs / next button onclick\r\n//TODO enable inputs / next button only through socket.on\r\nexport const Game = ({RoomID, UserName}: GameProps) => {\r\n\r\n    const [Statement, setStatement] = useState<IGameInput>({\r\n        type: StatementType.NoInput,\r\n        answers: [\"\"],\r\n        solution: \"\",\r\n        statement: \"\",\r\n        __v: 0,\r\n        _id: \"\",\r\n        cat_activity: 0,\r\n        cat_drink: 0,\r\n        cat_game: 0,\r\n        cat_sex: 0,\r\n        id: 0,\r\n        rating: 0\r\n    });\r\n\r\n    const [roomName, setRoomName] = useState(useParams().roomName);\r\n    const [playerName, setPlayerName] = useState(useParams().playerName)\r\n    const [playerID, setPlayerID] = useState(useParams().playerID)\r\n\r\n    const url = window.location.href;\r\n    const domainURL = url.substring(0, url.indexOf(\"/game\"));\r\n    const [inviteLink, setInviteLink] = useState(`${domainURL}/joingame/${roomName}`);\r\n\r\n    const [userList, setUserList] = useState(new Array<IClient>());\r\n    const [isGameMaster, setGameMaster] = useState(false);\r\n    const [gameMasterID, setGameMasterID] = useState('');\r\n\r\n    const history = useHistory();\r\n    const [cookie, setCookie, removeCookie] = useCookies(['playerID']);\r\n\r\n    const [game, setGame] = useState(Games.Dronq);\r\n    const [gameStatus, setGameStatus] = useState(GameStatus.startRound);\r\n\r\n    const [results, setResults] = useState([\"\"]);\r\n\r\n    const [isPlayer, setIsPlayer] = useState(true);\r\n    const [isOnline, setIsOnline] = useState(true);\r\n    const [isStandardView, setStandardView] = useState(true);\r\n\r\n    useBeforeunload(event => {\r\n        socket.emit(`${roomName}/${WSQuery.disconnect}`, playerID)\r\n    });\r\n\r\n    function handleAnswerInput(answer: string) {\r\n        console.log('Got answer: ', answer)\r\n        socket.emit(`${roomName}/${WSQuery.addAnswer}`, answer)\r\n    }\r\n\r\n    //Wird 1x aufgerufen wenn das Component lädt\r\n    useEffect(() => {\r\n        fetchRoomData();\r\n        checkForGamemaster();\r\n        socket = io(SERVER_LINK, {query: {roomName, playerID}})\r\n\r\n        //new User arrive and leave\r\n        socket.on(`${roomName}/${WSQuery.sendUserData}`, (data: any) => {\r\n            setUserList(data.players)\r\n            checkForGamemaster();\r\n            setGameMaster(data.gameMaster == playerID);\r\n        });\r\n\r\n        socket.on(`${roomName}/${WSQuery.startGame}`, (data: string) => {\r\n            setGameStatus(GameStatus.activeRound);\r\n        })\r\n\r\n        socket.on(`${roomName}/${WSQuery.next}`, (data: IGameInput) => {\r\n            setStatement(data);\r\n            setGameStatus(GameStatus.activeRound);\r\n        })\r\n\r\n        socket.on(`${roomName}/${WSQuery.receiveResults}`, (result: Array<string>) => {\r\n            setResults(result);\r\n            setGameStatus(GameStatus.endRound);\r\n        })\r\n\r\n        socket.on(`${roomName}/${playerID}/${WSQuery.makeDisplay}`, () => {\r\n            setIsPlayer(false);\r\n            console.log(\"#########################\")\r\n        })\r\n    }, []);\r\n\r\n\r\n    async function fetchRoomData() {\r\n        axios.post(`${SERVER_LINK}/api/getRoomByID`, {roomName, playerID}).then((response) => {\r\n            console.log('Initialise room: ', response)\r\n            if (response.data.status === 'failure') {\r\n                deleteCookies();\r\n                history.push('/');\r\n            } else {\r\n                let responseRoom : IRoom = response.data.room\r\n                setGameMasterID(responseRoom.gameMaster.name);\r\n                setUserList(responseRoom.players)\r\n                setStatement(response.data.room.activeStatement);\r\n                checkForGamemaster();\r\n            }\r\n        })\r\n    }\r\n\r\n    function addPlayer(playerName: string, playerProperties: IPlayerProperties) {\r\n        //TODO SAVE LOCALLY AND IN SERVER\r\n        console.log(playerName)\r\n        console.log(playerProperties.isDrinking)\r\n        console.log(playerProperties.isSingle)\r\n    }\r\n\r\n    function kickUser(player: IClient) {\r\n        if (isGameMaster) {\r\n            socket.emit(`${roomName}/${WSQuery.kick}`, player);\r\n        }\r\n    }\r\n\r\n    function makeGamemaster(player: IClient) {\r\n        if (isGameMaster) {\r\n            socket.emit(`${roomName}/${WSQuery.makeGameMaster}`, player);\r\n        }\r\n    }\r\n\r\n    function makeDisplay(player: IClient) {\r\n        if (isGameMaster) {\r\n            let bool = false;\r\n            socket.emit(`${roomName}/${WSQuery.setIsPlayer}`, ({player, bool}));\r\n        }\r\n    }\r\n\r\n    function deleteCookies() {\r\n        history.push(\"/\");\r\n        removeCookie('playerID');\r\n        removeCookie('roomName');\r\n    }\r\n\r\n    //check if current User is GameMaster -> if yes: Display the send button\r\n    async function checkForGamemaster() {\r\n        axios.post(`${SERVER_LINK}/api/getRoomByID`, {roomName, playerID}).then(response => {\r\n            try {\r\n                let responseRoom : IRoom = response.data.room\r\n                setGameMaster(playerID == responseRoom.gameMaster.id)\r\n            } catch (e){\r\n                console.log(e)\r\n            }\r\n        })\r\n    }\r\n\r\n    function gameMasterOnClick() {\r\n        switch (gameStatus) {\r\n            case GameStatus.startRound:\r\n                socket.emit(`${roomName}/${WSQuery.startGame}`, '')\r\n                break;\r\n            case GameStatus.activeRound:\r\n                socket.emit(`${roomName}/${WSQuery.startEvaluation}`, '')\r\n                break;\r\n            case GameStatus.endRound:\r\n                socket.emit(`${roomName}/${WSQuery.next}`, '');\r\n                break;\r\n        }\r\n    }\r\n\r\n    function changeGame(game: Games) {\r\n        setGame(game);\r\n        //TODO IMPLEMENT (WORKS ALREADY?)\r\n    }\r\n\r\n    useEffect(()=> {\r\n        if (!isPlayer) {\r\n            setStandardView(true);\r\n        }\r\n    }, [isPlayer])\r\n\r\n    function toggleOwnIsPlayer(){\r\n        setIsPlayer(!isPlayer);\r\n        socket.emit(`${roomName}/${WSQuery.setOwnIsPlayer}`, {isPlayer});\r\n    }\r\n\r\n    function toggleIsOnline() {\r\n        setIsOnline(!isOnline);\r\n        //TODO IF OFFLINE, EVERYONE IS NOT PLAYER (-> DISPLAY)\r\n        //TODO SEND OFFLINE PLAYERLIST TO SERVER\r\n    }\r\n\r\n    function toggleStandartView() {\r\n        setStandardView(!isStandardView);\r\n    }\r\n\r\n    return (\r\n        <div className=\"gameContent\">\r\n\r\n            <Content games={game}\r\n                     gameStatus={gameStatus} results={results} statement={Statement.statement}\r\n                     isStandartView={isStandardView} isPlayer={isPlayer}/>\r\n\r\n            <GameInput handleAnswerInput={handleAnswerInput}\r\n                       statement={Statement} players={userList}\r\n                       gameStatus={gameStatus} isPlayer={isPlayer}\r\n                       isGameMaster={isGameMaster} gameMasterOnClick={gameMasterOnClick}/>\r\n\r\n            <Sidebars\r\n                playersProps={\r\n                    {\r\n                        roomName: roomName,\r\n                        inviteLink: inviteLink,\r\n                        gameMaster: gameMasterID,\r\n                        kickUser: kickUser,\r\n                        makeDisplay: makeDisplay,\r\n                        makeGamemaster: makeGamemaster,\r\n                        addPlayer: addPlayer,\r\n                        userList: userList,\r\n                        isGameMaster: isGameMaster,\r\n                    }}\r\n                optionsProps={\r\n                    {\r\n                        game: game, changeGame: changeGame,\r\n                        isOnline: isOnline, toggleIsOnline: toggleIsOnline,\r\n                        isPlayer: isPlayer, toggleIsPlayer: toggleOwnIsPlayer,\r\n                        isStandardView: isStandardView, toggleStandardView: toggleStandartView,\r\n                        isGameMaster: isGameMaster,\r\n                        leaveGame: deleteCookies,\r\n                    }}\r\n            />\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default Game;","import React from \"react\";\r\nimport \"../../../css/index.css\";\r\nimport \"./submitIdeas.css\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nfunction SubmitIdeas() {\r\n    return (\r\n        <div className=\"createjoinContainer\">\r\n            <div className=\"title\">\r\n                YOUR IDEAS\r\n            </div>\r\n            <form action=\"mailto:project.arcake@gmail.com\" className=\"formContainer submitIdeasForm\">\r\n                <table>\r\n                    <tr>\r\n                        <p className=\"submitIdeasFormHeadline\">\r\n                            Please check the box to which your submission fits the most.\r\n                        </p>\r\n                        <br/>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>\r\n                            <div className=\"radioAlignment\">\r\n                                <label className=\"radioLabel\">\r\n                                    <input type=\"radio\" value=\"general\" name=\"submissions\"/>\r\n                                    <span></span>Website\r\n                                </label>\r\n                            </div>\r\n                            <div className=\"radioAlignment\">\r\n                                <label className=\"radioLabel\">\r\n                                    <input type=\"radio\" value=\"statements\" name=\"submissions\"/>\r\n                                    <span></span>Statements\r\n                                </label>\r\n                            </div>\r\n                            <div className=\"radioAlignment\">\r\n                                <label className=\"radioLabel\">\r\n                                    <input type=\"radio\" value=\"general\" name=\"submissions\"/>\r\n                                    <span></span>Game ideas\r\n                                </label>\r\n                            </div>\r\n                            <div className=\"radioAlignment\">\r\n                                <label className=\"radioLabel\">\r\n                                    <input type=\"radio\" value=\"general\" name=\"submissions\"/>\r\n                                    <span></span>Other\r\n                                </label>\r\n                            </div>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>\r\n                            <TextField\r\n                                className=\"textFieldColor\"\r\n                                id=\"statementIdeas\"\r\n                                label=\"Type your text here...\"\r\n                                multiline\r\n                                rows={4}\r\n                                defaultValue=\"\"\r\n                                variant=\"filled\"\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className=\"classes.button\"\r\n                                type=\"submit\"\r\n                            >\r\n                                Send\r\n                            </Button>\r\n                        </td>\r\n                    </tr>\r\n                </table>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SubmitIdeas;","import React from 'react';\r\nimport {Layout} from \"./components/utility/Layout\";\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport Home from \"./components/pages/Home\";\r\nimport CreateGame from \"./components/pages/createJoinGame/CreateGame\";\r\nimport JoinGame from \"./components/pages/createJoinGame/JoinGame\";\r\nimport AboutUs from \"./components/pages/aboutUs/AboutUs\";\r\nimport Intimacy from \"./components/pages/howToPlay/Intimacy\";\r\nimport Dronq from \"./components/pages/howToPlay/Dronq\";\r\nimport Game from \"./components/pages/game/Game\";\r\nimport SubmitIdeas from \"./components/pages/submitIdeas/SubmitIdeas\";\r\nimport {CookiesProvider} from 'react-cookie';\r\n\r\n\r\nfunction App() {\r\n    console.log(process.env.NODE_ENV);\r\n    return (\r\n        <CookiesProvider>\r\n            <Layout>\r\n                    <Switch>\r\n                        <Route path=\"/\" exact component={Home}/>\r\n                        <Route path=\"/creategame\" component={CreateGame}/>\r\n                        <Route exact path=\"/joingame\" component={JoinGame}/>\r\n                        <Route path=\"/joingame/:roomName\" component={JoinGame}/>\r\n                        <Route path=\"/aboutus\" component={AboutUs}/>\r\n                        <Route path=\"/howtoplay/dronq\" component={Dronq}/>\r\n                        <Route path=\"/howtoplay/intimacy\" component={Intimacy}/>\r\n                        <Route path=\"/submitideas\" component={SubmitIdeas}/>\r\n                        <Route path=\"/game/:playerID/:roomName\" component={Game}/>\r\n                    </Switch>\r\n            </Layout>\r\n        </CookiesProvider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nconst rootElement = document.getElementById('root');\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>,\r\n    rootElement,\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}